<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[games202 L3 实时阴影2]]></title>
      <url>/2021/06/23/games202-L3-%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B12/</url>
      <content type="html"><![CDATA[<h1 id="PCF和PCSS的回顾"><a href="#PCF和PCSS的回顾" class="headerlink" title="PCF和PCSS的回顾"></a>PCF和PCSS的回顾</h1><h2 id="PCF回顾"><a href="#PCF回顾" class="headerlink" title="PCF回顾"></a>PCF回顾</h2><p>滤波,卷积,加权平均在某种程度上是同一件事</p>
<p>PCF中,对应被滤波的原函数应该是X+(D1 - D2),如下图</p>
<p><img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210623224451.png" alt="image-20210623224444185"></p>
<p>而不是对shadow map(如下图)或者生成的图像的Visibility进行滤波</p>
<p><img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210623225009.png" alt="image-20210623225009867"></p>
<h2 id="PCSS回顾"><a href="#PCSS回顾" class="headerlink" title="PCSS回顾"></a>PCSS回顾</h2><ul>
<li><p>可能比较慢的步骤</p>
<p>在给定区域内查询每一个texel, 对应第一步(求平均blocker depth)和第三步(PCF)</p>
<p>VSSM(下文)就是针对PCSS这两个相对较慢的步骤进行了加速</p>
</li>
</ul>
<h1 id="Variance-soft-shadow-mapping"><a href="#Variance-soft-shadow-mapping" class="headerlink" title="Variance soft shadow mapping"></a>Variance soft shadow mapping</h1><h2 id="对PCF的加速"><a href="#对PCF的加速" class="headerlink" title="对PCF的加速"></a>对PCF的加速</h2><p>PCSS选择一个邻域内深度比较然后再把得到的0-1值平均,等价于求出在邻域里有多少个Texel离得更近.</p>
<p>我们<strong>假设</strong>texel深度分布为正态分布,则容易求出某深度排多少(CDF),问题转化成求出这个正态分布,因为正态分布由均值和方差确定,即求这两个参数.</p>
<ul>
<li>对于均值, 硬件会做MIPMAP,我们也可以用 Summed Area Tables (SAT) 求出,见下文</li>
<li>对于方差, Var(X) = E(X^2^) − E^2^(X), 只需要生成shadow map同时生成深度平方对应的图</li>
</ul>
<p>在求出分布后,我们可以通过数值解/查表得知P(x&gt;t),但是这里进行了又一个假设:</p>
<p><img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210623230720.png" alt="image-20210623230720126"></p>
<p>使用切比雪夫不等式进行估计</p>
<ul>
<li>该不等式并不要求正态分布,只要求是单峰分布(正态的假设是满足的)</li>
<li>我们直接把不等近似成相等,注意该近似是在t&gt;u时误差才较小的</li>
</ul>
<h2 id="对求blocker-depth的加速"><a href="#对求blocker-depth的加速" class="headerlink" title="对求blocker depth的加速"></a>对求blocker depth的加速</h2><p>经过上面操作后,PCSS的第三步不再需要循环访问邻域的点了,然而第一步求平均blocker depth时还要访问邻域,以下是另一方面的加速</p>
<p>我们记Blocker (z &lt; t)的平均深度为 Z<del>occ</del></p>
<p>非blocker (z &gt; t) 的平均深度为Z<del>unocc</del></p>
<p>则容易得到以下公式:</p>
<img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210623231353.png" alt="image-20210623231353361" style="zoom:25%;" />

<p>我们希望求得Zocc</p>
<p>Zavg是已知的</p>
<p>N1/N = P (X&gt;t) 可以用之前的切比雪夫不等式近似求出</p>
<p>N2/N = 1 - N1/N</p>
<p>Zunocc我们直接近似为t(假设更深的点深度都和该点相同), 这个相等假设有一定的合理性因为大部分阴影接受面都是平面(深度相同)</p>
<p>则Zocc可以求出</p>
<h1 id="MIPMAP-and-Summed-Area-Variance-Shadow-Maps"><a href="#MIPMAP-and-Summed-Area-Variance-Shadow-Maps" class="headerlink" title="MIPMAP and Summed-Area Variance Shadow Maps"></a>MIPMAP and Summed-Area Variance Shadow Maps</h1><p>在VCSS中,为了求得均值,我们需要经常对一个矩形区域进行范围查询(Range Query)</p>
<p><strong>MIPMAP</strong> 和 **Summed Area Table (SAT)**都可以用来解决类似范围查询的问题</p>
<p>MIPMAP在101中讲过,本处就不再赘述</p>
<h2 id="SAT"><a href="#SAT" class="headerlink" title="SAT"></a>SAT</h2><p>基本可以认为是二维的前缀和</p>
<p><img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210623232244.png" alt="image-20210623232244389"></p>
<p>对于任何一个轴对齐的矩形(上图中的蓝色)区域,它可以转化为四个矩形相加减的结果,而且这四个矩形都是左上角是固定顶点的矩形,我们完全可以通过预处理求出所有左上角为矩形的左上角,右下角为(X,Y)的矩形和,然后对于任何矩形区域,查表四次即可</p>
<ul>
<li>建表会有时间空间的开销,空间开销问题不大(等于原图大小),时间开销可以用并行(CUDA)加速</li>
</ul>
<h1 id="Moment-shadow-mapping"><a href="#Moment-shadow-mapping" class="headerlink" title="Moment shadow mapping"></a>Moment shadow mapping</h1><p>该方法是对VSSM的一次改进, VSSM中假设了正态分布,然而该假设有时会出问题,如下图,如果用红线的正态分布估计蓝线的实际分布,得到的阴影结果会更亮,这一问题被称为**”Light leaking”**(有些人也称light bleeding,但是为了防止与后面的color bleeding混淆而不采用该说法)</p>
<img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210623232941.png" alt="image-20210623232941130" style="zoom: 25%;" />

<ul>
<li><p>Moment SS核心: 用更高维的矩(moment)来得到更好的分布</p>
<ul>
<li>矩的定义很有多等价说法,我们这里用最简单的x x2 x3 x4</li>
<li>VSSM其实只用了一阶和二阶矩</li>
</ul>
</li>
<li><p>结论:用m阶矩可以表示一个m/2个阶梯的函数(证明略,老师说很复杂)</p>
<p>实际中,一般四阶矩已经足够好了,即生成shadow map时,同时记录z,z^2^,z^3^,z^4^</p>
<p>然后blocker search 和PCF中存储矩生成的CDF</p>
</li>
<li><p>优点,解决了light　leaking的问题</p>
</li>
<li><p>缺点，存储，时间的花销增大</p>
<h1 id="对比和总结"><a href="#对比和总结" class="headerlink" title="对比和总结"></a>对比和总结</h1></li>
</ul>
<p>这三种方法都是生成软阴影的方法</p>
<p>VSSM对PCSS进行了加速的改进，Moment SS又对VSSM进行了改进，解决了漏光的问题，在过去一段时间VSSM和moment也有应用，但现在主要用的是噪声版本的PCSS</p>
<ul>
<li>所谓噪声版本PCSS，即在邻域内不查询所有点而是采样，因此产生了噪声</li>
<li>噪声PCSS被广泛应用的前提,当前各种降噪方法非常成熟（TAA什么的）</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> GAMES202 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[games202 L3 实时阴影1]]></title>
      <url>/2021/06/21/games202-L3-%E5%AE%9E%E6%97%B6%E9%98%B4%E5%BD%B11/</url>
      <content type="html"><![CDATA[<h1 id="Shadow-Mapping-回顾"><a href="#Shadow-Mapping-回顾" class="headerlink" title="Shadow Mapping 回顾"></a>Shadow Mapping 回顾</h1><ul>
<li>2-pass的算法</li>
<li>image-space的算法</li>
</ul>
<p>自遮蔽问题</p>
<p>走样</p>
<h1 id="Shadow-mapping-的数学原理"><a href="#Shadow-mapping-的数学原理" class="headerlink" title="Shadow mapping 的数学原理"></a>Shadow mapping 的数学原理</h1><ul>
<li>RTR中的一个重要近似</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210621231721.png" alt="image-20210621231714836"></p>
<p>可以用到渲染方程里面，把V作为上式中的ｆ提取出来</p>
<p>近似适用条件如下，该情况是满足的</p>
<ul>
<li>When is it accurate?<ul>
<li>Small support<br>(point / directional lighting)</li>
<li>Smooth integrand<br>(diffuse bsdf / constant radiance area lighting)</li>
</ul>
</li>
</ul>
<h1 id="PCSS-Percentage-closer-soft-shadows"><a href="#PCSS-Percentage-closer-soft-shadows" class="headerlink" title="PCSS: Percentage closer soft shadows"></a>PCSS: Percentage closer soft shadows</h1><p>一种实现软阴影的有效方法, 基于PCF和shadow mapping</p>
<p>单光源</p>
<h2 id="PCF"><a href="#PCF" class="headerlink" title="PCF"></a>PCF</h2><p>对深度比较的结果(0,1的二值)在一个范围内取平均,用这个平均值作为V的结果</p>
<ul>
<li>范围大小的影响<ul>
<li>小范围,阴影更尖锐</li>
<li>大范围,<strong>阴影越软</strong></li>
</ul>
</li>
</ul>
<p>－＞　可以想到用PCF做软阴影，那么问题是正确的size怎么选?</p>
<h2 id="Blocker-Size"><a href="#Blocker-Size" class="headerlink" title="Blocker Size"></a>Blocker Size</h2><p>一个观察: 阴影平面距离遮挡物越远,产生的阴影越软</p>
<p>引入blocker size的概念,可以以此作为PCF中选择filter size的决定因素</p>
<h2 id="PCSS的具体流程"><a href="#PCSS的具体流程" class="headerlink" title="PCSS的具体流程"></a>PCSS的具体流程</h2><ul>
<li>Step 1: Blocker search<br>(getting the average blocker depth in a certain region,可以是定值,也可以动态)</li>
<li>Step 2: Penumbra estimation<br>(use the average blocker depth to determine filter size)</li>
<li>Step 3: Percentage Closer Filtering</li>
</ul>
<p>关于第一步中动态决定region大小,可以把shadow map放到近截面(z-near)(这个面是人为规定的),把要渲染的点和光源相连,shadowmap上截出来的区域就是对blocker depth 取平均的区域.</p>
<p>参考: PCF&amp;PCSS实现软阴影——GAMES202学习笔记 - insulation的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/359377010">https://zhuanlan.zhihu.com/p/359377010</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> GAMES202 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[games202 L2 基础知识回顾]]></title>
      <url>/2021/06/16/games202-L2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/</url>
      <content type="html"><![CDATA[<h1 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h1><p>参考101相关内容</p>
<p><img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210616122054.png" alt="image-20210616122038868"></p>
<h1 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h1><p>一系列从CPU调用GPU管线的API</p>
<p>跨平台</p>
<p>同类替代品(DirectX, Vulkan)</p>
<ul>
<li><p>缺点</p>
<ul>
<li>许多版本</li>
<li>C风格,不好用</li>
<li>(曾经)难以debug</li>
</ul>
</li>
<li><p>Open 执行流程</p>
<p>可以用画油画来类比</p>
<p><strong>A. 摆放物体</strong></p>
<p>用户说明物体的顶点,发现,纹理坐标并把他们送到GPU的Vertex buffer object(VBO)</p>
<p>Model 变换</p>
<p><strong>B.设置画架</strong></p>
<p>View变换</p>
<p>创建frame buffer</p>
<p><strong>C.把画布放到画架上</strong></p>
<p>在OpenGL的每个渲染pass上, 声明要使用的framebuffer, 声明一个或是多个要输出的texture, 渲染</p>
<p><strong>D.在画布上画画</strong></p>
<p>使用vertex/fragment shaders来着色</p>
<ul>
<li><p>对于每个顶点</p>
<p>OpenGL调用用户指定的shader: MVP和其他ops</p>
</li>
<li><p>对于每个primitive</p>
<p>OpenGL做光栅化,对每个该fragment包含的pixel生成对应的fragment</p>
</li>
<li><p>对于每个fragment</p>
<p>OpenGL调用用户指定的shader: 着色和光照计算</p>
<p>OpenGL还会处理z-buffer,除非被用户重写</p>
</li>
</ul>
</li>
</ul>
<h1 id="OpenGL-Shading-Language-GLSL"><a href="#OpenGL-Shading-Language-GLSL" class="headerlink" title="OpenGL Shading Language(GLSL)"></a>OpenGL Shading Language(GLSL)</h1><ul>
<li>初始化<ul>
<li>创建shader: vertex和fragment</li>
<li>编译shader</li>
<li>把shader连接到program上</li>
<li>链接program</li>
<li>使用program</li>
</ul>
</li>
<li>Debug shader<ul>
<li>NNsight Graphics (cross platform, NVIDIA GPUs only)</li>
<li>RenderDoc (cross platform, no limitations on GPUs)</li>
</ul>
</li>
</ul>
<h1 id="渲染方程"><a href="#渲染方程" class="headerlink" title="渲染方程"></a>渲染方程</h1><p><img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210616125720.png" alt="image-20210616125720372"></p>
<p>RTR的渲染方程和101中的渲染方程等价,无非换了种形式</p>
<p>我们可以使用cube map 或者 sphere map来表示来自各个方向的incident lighting</p>
<p>本课之后还会引入其他的方法</p>
]]></content>
      
        
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> GAMES202 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[games202 L1 概述]]></title>
      <url>/2021/06/16/games202-L1-%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h1 id="L1-Introduction-and-Overview"><a href="#L1-Introduction-and-Overview" class="headerlink" title="L1 Introduction and Overview"></a>L1 Introduction and Overview</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul>
<li>实时高质量渲染</li>
</ul>
<p>实时: 大于30FPS, (对于XR是90FPS)</p>
<p>高质量：真实，可靠（all-time correctness (exact or approximate),<br>no tolerance to (uncontrollable) failures）</p>
<ul>
<li>课程的四大部分</li>
</ul>
<p>阴影</p>
<p>全局光照</p>
<p>基于物理的渲染</p>
<p>实时光线追踪</p>
<ul>
<li>Evolution </li>
</ul>
<p>通过适当的近似，生成照片级真实（photorealistic）又比离线渲染要快的图片</p>
<ul>
<li>实时渲染发展的几个里程碑</li>
</ul>
<p>可编程渲染shader（20年前）</p>
<p>预计算方法（15年前）</p>
<p>Interactive（指FPS很低） 光追（8到10年前）</p>
]]></content>
      
        
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> GAMES202 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity HDRP入门]]></title>
      <url>/2021/05/31/Unity-HDRP%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="Unity-HDRP"><a href="#Unity-HDRP" class="headerlink" title="Unity HDRP"></a>Unity HDRP</h1><p>本文为我学习Unity HDRP的记录笔记</p>
<p>HDRP(<strong>High Definition render pipeline</strong>) 高保真度渲染管线, 目的是得到高质量的图形效果,相对应的性能会稍弱</p>
<ul>
<li>HDRP的三个princilpes:<ul>
<li>Physically Based Rendering (PBR)</li>
<li>unified and coherent lighting</li>
<li>rendering-path independence</li>
</ul>
</li>
</ul>
<ul>
<li> 安装HDRP对应的package</li>
</ul>
<p>  window-&gt;package manager, 若找不到”<strong>High Definition RP</strong> “则需要在advanced setting中开启enable preview packages</p>
<p>原文中还提到了需要新建HDRP对应的asset, 但是我发现在2020.3.0f1 版本中, 安装hdrp的package会跳出方框,里面点fix all会自动完成本设置</p>
<p>参考资料</p>
<p><a href="https://learn.unity.com/tutorial/introduction-to-hdrp-2019-3?language=en#5e725de2edbc2a00203484cc">https://learn.unity.com/tutorial/introduction-to-hdrp-2019-3?language=en#5e725de2edbc2a00203484cc</a></p>
]]></content>
      
        <categories>
            
            <category> Unity </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unity </tag>
            
            <tag> HDRP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GAMES101-4 动画与模拟]]></title>
      <url>/2021/05/27/GAMES101-4-%E5%8A%A8%E7%94%BB%E4%B8%8E%E6%A8%A1%E6%8B%9F/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[GAMES101-3 光线追踪]]></title>
      <url>/2021/05/27/GAMES101-3-%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[GAMES101-2 几何]]></title>
      <url>/2021/05/27/GAMES101-2-%E5%87%A0%E4%BD%95/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[GAMES101-1 光栅化]]></title>
      <url>/2021/05/27/GAMES101-1%20%E5%85%89%E6%A0%85%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h1><p>对应视频 L3-L9</p>
]]></content>
      
        
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> GAMES101 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读巨人CEO内部信后感]]></title>
      <url>/2021/05/15/%E8%AF%BB%E5%B7%A8%E4%BA%BACEO%E5%86%85%E9%83%A8%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>今天看了芒果冰的游戏公司财报分析视频,无意中得知了巨人网络CEO吴萌的内部信,虽然我没玩过巨人的游戏也不是很喜欢,但不得不承认还是从这封两万多字的长信中获得了许多关于这个行业的思考和信息.</p>
<p>他分析了腾讯,网易,米哈游还有自家公司的游戏,聊了大公司和小公司,在他看来,大公司具备的丰富资源某种程度上也是拖累和诅咒(资源陷阱). 大公司很容易陷入思维上的懒惰, 尝试用资源解决问题,然而在游戏方面,资源是不能解决所有问题的,它仅仅起到一个加速作业,而不能让一个烂游戏变成好游戏,他也提到了创业,家庭,对游戏行业的预期等若干话题,此处不赘述</p>
<p>我最为赞同的一点大概就是热爱吧.我始终觉得,如果你热爱自己的事业,你才会投入时间和精力提升自己,并在一步步的提高中提升自己的实力和影响力. 做出牛逼的东西的成就感是可以很大程度上激励自我的. 所以说成功者的996很多都是自我驱使的,工作本身对于他们来说就是获得快乐的一种方式,就和普通人看视频打游戏没什么区别.如果自己很讨厌一份工作,哪怕是955 或者是公务员这种更加清闲的工作,每一秒呆着也会是煎熬. 这也是我选择放弃互联网公司进入游戏行业的初心所在.</p>
<p>写至此处,忽然想起了中学往事,当时看见若干一中的,清北往届毕业生在返校时分享成功经验,坐在角落的我莫名想到了项羽的”彼可取而代之”,想象着自己会不会未来也有一天站在这样的演讲台上面对一双双渴望的眼睛. 问题来了, 我将来会有机会写这样的内部信吗? 🤣</p>
]]></content>
      
        
        <tags>
            
            <tag> 闲话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GAMES101-0入门]]></title>
      <url>/2021/05/12/GAMES101-0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="GAMES101简介"><a href="#GAMES101简介" class="headerlink" title="GAMES101简介"></a>GAMES101简介</h1><p>GAME101是闫老师开的现代图形学入门有关课程,课程内容主要分为光栅化,几何,光线传播,模拟四大部分. 并有0-8九次作业.</p>
<p>L1对图形学整体进行了简单介绍,L2介绍了学习本课程所需要的部分线性代数基础,因为内容简单,不在系列笔记中包含.</p>
<h1 id="更新计划"><a href="#更新计划" class="headerlink" title="更新计划"></a>更新计划</h1><p>目前的进度是看完了除几何外的视频,<strong>将以内容而非课程组织笔记</strong>, 并会完成对应的作业</p>
<ul>
<li>课程包含的四个主要模块<ul>
<li>光栅化</li>
<li>曲线和曲面</li>
<li>光线追踪</li>
<li>动画/模拟</li>
</ul>
</li>
</ul>
<h1 id="拓展学习"><a href="#拓展学习" class="headerlink" title="拓展学习"></a>拓展学习</h1><p>我希望通过本课达到入门计算机图形学的目的,之后等有时间还可以考虑进一步研究,可选的计划有:</p>
<ol>
<li><p>手写一个软渲染器</p>
</li>
<li><p>GAMES202 <a href="http://games-cn.org/games202/">高质量实时渲染</a></p>
</li>
</ol>
<h2 id="L1-Intro"><a href="#L1-Intro" class="headerlink" title="L1-Intro"></a>L1-Intro</h2><p>计算机图形学</p>
<ul>
<li>定义</li>
<li>应用</li>
<li>和CV的区别</li>
</ul>
<h2 id="L2-线性代数基础"><a href="#L2-线性代数基础" class="headerlink" title="L2-线性代数基础"></a>L2-线性代数基础</h2><ul>
<li>向量<ul>
<li>点乘: 投影 相似度</li>
<li>叉乘: 判断左右(2D), 判断内外</li>
</ul>
</li>
<li>矩阵<ul>
<li>乘法</li>
<li>转置</li>
<li><strong>几何意义</strong>: 变换, MVP</li>
</ul>
</li>
</ul>
<h2 id="L3-L4-变换"><a href="#L3-L4-变换" class="headerlink" title="L3, L4-变换"></a>L3, L4-变换</h2><p>用矩阵来表示变化（向量左乘矩阵）</p>
<ul>
<li><p>齐次坐标（Homogeneous coordinates）</p>
<p>引入齐次坐标的原因：平移变换不能用矩阵形式表示，即不是线性变换，引入齐次坐标后可以将其归纳进统一的形式</p>
</li>
<li><p>仿射变换</p>
<p><img src="https://raw.githubusercontent.com/Yan-Xinyu/Pictures_YXY/main/20210530210247.png" alt="image-20210530210236262"></p>
</li>
<li><p>逆变换， 对应的矩阵是原变换矩阵的逆矩阵M^-1^</p>
</li>
<li><p>3D齐次坐标 </p>
<ul>
<li>点（x,y,z,1)</li>
<li>向量（x,y,z,0)</li>
</ul>
</li>
</ul>
<h1 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h1><p>主页，课件： <a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html</a></p>
<p>作业： <a href="http://games-cn.org/forums/topic/allhw/">http://games-cn.org/forums/topic/allhw/</a></p>
<p>参考笔记：<a href="https://www.notion.so/GAMES101-b0e27c856cde429b8672671a54c34817">https://www.notion.so/GAMES101-b0e27c856cde429b8672671a54c34817</a></p>
]]></content>
      
        <categories>
            
            <category> 计算机图形学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计算机图形学 </tag>
            
            <tag> GAMES101 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客更新计划]]></title>
      <url>/2021/05/12/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>近期花了一些时间配置博客,近期的博客更新计划有:</p>
<ol>
<li>GAMES101笔记以及作业</li>
<li>手写软渲染器</li>
<li>UE4制作的ARPG项目</li>
<li>UE4C++</li>
<li>Motion Matching</li>
<li>UE5</li>
</ol>
<p>后续更新待安排.</p>
]]></content>
      
        <categories>
            
            <category> 闲话 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
